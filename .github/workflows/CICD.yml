name: CICD
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
permissions:
  contents: read
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Maven
        run: |
          chmod 777 ./mvnw
          ./mvnw clean package -DskipTests
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/live_server .
      - name: Push Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/live_server:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Docker compose
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: |
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            DB1_JDBC_URL=${{ secrets.APPLICATION_SPRING_DATASOURCE_DB1_PROD_JDBC_URL }}
            DB2_JDBC_URL=${{ secrets.APPLICATION_SPRING_DATASOURCE_DB2_PROD_JDBC_URL }}
            KAKAO_CLIENT_ID=${{ secrets.APPLICATION_KAKAO_CLIENT_ID }}
            KAKAO_REDIRECT_URI=${{ secrets.APPLICATION_KAKAO_PROD_REDIRECT_URI }}
            DB1_USERNAME=${{ secrets.APPLICATION_SPRING_DATASOURCE_DB1_USERNAME }}
            DB1_PASSWORD=${{ secrets.APPLICATION_SPRING_DATASOURCE_DB1_PASSWORD }}
            DB2_USERNAME=${{ secrets.APPLICATION_SPRING_DATASOURCE_DB2_USERNAME }}
            DB2_PASSWORD=${{ secrets.APPLICATION_SPRING_DATASOURCE_DB2_PASSWORD }}
          script_stop: true
          script: |
            echo "DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME}" > .env
            echo "spring.datasource.db1.prod.jdbc-url=${DB1_JDBC_URL}" >> .env
            echo "spring.datasource.db2.prod.jdbc-url=${DB2_JDBC_URL}" >> .env
            echo "kakao.client.id=${KAKAO_CLIENT_ID}" >> .env
            echo "kakao.redirect.prod.redirect.uri=${KAKAO_REDIRECT_URI}" >> .env
            echo "spring.datasource.db1.username=${DB1_USERNAME}" >> .env
            echo "spring.datasource.db1.password=${DB1_PASSWORD}" >> .env
            echo "spring.datasource.db2.username=${DB2_USERNAME}" >> .env
            echo "spring.datasource.db2.password=${DB2_PASSWORD}" >> .env
            sudo docker pull ${DOCKERHUB_USERNAME}/live_server:latest
            if [ "$(sudo docker ps -q -f name=prod)" ]; then
                sudo docker stop prod
                sudo docker rm prod
            fi
            sudo docker-compose -f docker-compose-prod.yml up -d