name: CI/CD using github action & docker
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      # JDK setting - github actions에서 사용할 JDK 설정
      - uses: actions/checkout@v3
      - name: Install JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: |
          chmod 777 ./mvnw
          ./mvnw clean package -DskipTests

      - name: Install Docker Compose
        id: install_docker_compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          APPLICATION_SPRING_DATASOURCE_DB1_DRIVERCLASSNAME: ${{secrets.APPLICATION_SPRING_DATASOURCE_DB1_DRIVERCLASSNAME}}
          APPLICATION_SPRING_DATASOURCE_DB2_DRIVERCLASSNAME: ${{secrets.APPLICATION_SPRING_DATASOURCE_DB2_DRIVERCLASSNAME}}
          APPLICATION_SPRING_DATASOURCE_DB1_PROD_JDBC_URL: ${{ secrets.APPLICATION_SPRING_DATASOURCE_DB1_PROD_JDBC_URL }}
          APPLICATION_SPRING_DATASOURCE_DB2_PROD_JDBC_URL: ${{ secrets.APPLICATION_SPRING_DATASOURCE_DB2_PROD_JDBC_URL }}
          APPLICATION_KAKAO_CLIENT_ID: ${{ secrets.APPLICATION_KAKAO_CLIENT_ID }}
          APPLICATION_KAKAO_PROD_REDIRECT_URI: ${{ secrets.APPLICATION_KAKAO_PROD_REDIRECT_URI }}
          APPLICATION_SPRING_DATASOURCE_DB1_USERNAME: ${{ secrets.APPLICATION_SPRING_DATASOURCE_DB1_USERNAME }}
          APPLICATION_SPRING_DATASOURCE_DB1_PASSWORD: ${{ secrets.APPLICATION_SPRING_DATASOURCE_DB1_PASSWORD }}
          APPLICATION_SPRING_DATASOURCE_DB2_USERNAME: ${{ secrets.APPLICATION_SPRING_DATASOURCE_DB2_USERNAME }}
          APPLICATION_SPRING_DATASOURCE_DB2_PASSWORD: ${{ secrets.APPLICATION_SPRING_DATASOURCE_DB2_PASSWORD }}
          SSL_KEY_STORE_PASSWORD: ${{secrets.SSL_KEY_STORE_PASSWORD}}
        run: |
          echo "DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME}" > .env
          echo "APPLICATION_SPRING_DATASOURCE_DB1_DRIVERCLASSNAME=${APPLICATION_SPRING_DATASOURCE_DB1_DRIVERCLASSNAME}" >> .env
          echo "APPLICATION_SPRING_DATASOURCE_DB2_DRIVERCLASSNAME=${APPLICATION_SPRING_DATASOURCE_DB2_DRIVERCLASSNAME}" >> .env
          echo "APPLICATION_SPRING_DATASOURCE_DB1_PROD_JDBC_URL=${APPLICATION_SPRING_DATASOURCE_DB1_PROD_JDBC_URL}" >> .env
          echo "APPLICATION_SPRING_DATASOURCE_DB2_PROD_JDBC_URL=${APPLICATION_SPRING_DATASOURCE_DB2_PROD_JDBC_URL}" >> .env
          echo "APPLICATION_KAKAO_CLIENT_ID=${APPLICATION_KAKAO_CLIENT_ID}" >> .env
          echo "APPLICATION_KAKAO_PROD_REDIRECT_URI=${APPLICATION_KAKAO_PROD_REDIRECT_URI}" >> .env
          echo "APPLICATION_SPRING_DATASOURCE_DB1_USERNAME=${APPLICATION_SPRING_DATASOURCE_DB1_USERNAME}" >> .env
          echo "APPLICATION_SPRING_DATASOURCE_DB1_PASSWORD=${APPLICATION_SPRING_DATASOURCE_DB1_PASSWORD}" >> .env
          echo "APPLICATION_SPRING_DATASOURCE_DB2_USERNAME=${APPLICATION_SPRING_DATASOURCE_DB2_USERNAME}" >> .env
          echo "APPLICATION_SPRING_DATASOURCE_DB2_PASSWORD=${APPLICATION_SPRING_DATASOURCE_DB2_PASSWORD}" >> .env
          echo "SSL_KEY_STORE_PASSWORD=${SSL_KEY_STORE_PASSWORD}" >> .env
          cat .env
          
          # Build the Docker image
          docker-compose -f docker-compose.yml build --build-arg PROFILES=prod --build-arg ENV=prod
          docker push ${DOCKERHUB_USERNAME}/live_server:latest


      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          APPLICATION_SPRING_DATASOURCE_DB1_DRIVERCLASSNAME: ${{secrets.APPLICATION_SPRING_DATASOURCE_DB1_DRIVERCLASSNAME}}
          APPLICATION_SPRING_DATASOURCE_DB2_DRIVERCLASSNAME: ${{secrets.APPLICATION_SPRING_DATASOURCE_DB2_DRIVERCLASSNAME}}
          APPLICATION_SPRING_DATASOURCE_DB1_PROD_JDBC_URL: ${{ secrets.APPLICATION_SPRING_DATASOURCE_DB1_PROD_JDBC_URL }}
          APPLICATION_SPRING_DATASOURCE_DB2_PROD_JDBC_URL: ${{ secrets.APPLICATION_SPRING_DATASOURCE_DB2_PROD_JDBC_URL }}
          APPLICATION_KAKAO_CLIENT_ID: ${{ secrets.APPLICATION_KAKAO_CLIENT_ID }}
          APPLICATION_KAKAO_PROD_REDIRECT_URI: ${{ secrets.APPLICATION_KAKAO_PROD_REDIRECT_URI }}
          APPLICATION_SPRING_DATASOURCE_DB1_USERNAME: ${{ secrets.APPLICATION_SPRING_DATASOURCE_DB1_USERNAME }}
          APPLICATION_SPRING_DATASOURCE_DB1_PASSWORD: ${{ secrets.APPLICATION_SPRING_DATASOURCE_DB1_PASSWORD }}
          APPLICATION_SPRING_DATASOURCE_DB2_USERNAME: ${{ secrets.APPLICATION_SPRING_DATASOURCE_DB2_USERNAME }}
          APPLICATION_SPRING_DATASOURCE_DB2_PASSWORD: ${{ secrets.APPLICATION_SPRING_DATASOURCE_DB2_PASSWORD }}
          SSL_KEY_STORE_PASSWORD: ${{secrets.SSL_KEY_STORE_PASSWORD}}
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: DOCKERHUB_USERNAME,APPLICATION_SPRING_DATASOURCE_DB1_PROD_JDBC_URL,APPLICATION_SPRING_DATASOURCE_DB2_PROD_JDBC_URL,APPLICATION_KAKAO_CLIENT_ID,APPLICATION_KAKAO_PROD_REDIRECT_URI,APPLICATION_SPRING_DATASOURCE_DB1_USERNAME,APPLICATION_SPRING_DATASOURCE_DB1_PASSWORD,APPLICATION_SPRING_DATASOURCE_DB2_USERNAME,APPLICATION_SPRING_DATASOURCE_DB2_PASSWORD
          script_stop: true
          script: |
            cd ~/backend/web/bodam-server || exit
            git pull
            echo "DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME}" > .env
            echo "APPLICATION_SPRING_DATASOURCE_DB1_DRIVERCLASSNAME=${APPLICATION_SPRING_DATASOURCE_DB1_DRIVERCLASSNAME}" >> .env
            echo "APPLICATION_SPRING_DATASOURCE_DB2_DRIVERCLASSNAME=${APPLICATION_SPRING_DATASOURCE_DB2_DRIVERCLASSNAME}" >> .env
            echo "APPLICATION_SPRING_DATASOURCE_DB1_PROD_JDBC_URL=${APPLICATION_SPRING_DATASOURCE_DB1_PROD_JDBC_URL}" >> .env
            echo "APPLICATION_SPRING_DATASOURCE_DB2_PROD_JDBC_URL=${APPLICATION_SPRING_DATASOURCE_DB2_PROD_JDBC_URL}" >> .env
            echo "APPLICATION_KAKAO_CLIENT_ID=${APPLICATION_KAKAO_CLIENT_ID}" >> .env
            echo "APPLICATION_KAKAO_PROD_REDIRECT_URI=${APPLICATION_KAKAO_PROD_REDIRECT_URI}" >> .env
            echo "APPLICATION_SPRING_DATASOURCE_DB1_USERNAME=${APPLICATION_SPRING_DATASOURCE_DB1_USERNAME}" >> .env
            echo "APPLICATION_SPRING_DATASOURCE_DB1_PASSWORD=${APPLICATION_SPRING_DATASOURCE_DB1_PASSWORD}" >> .env
            echo "APPLICATION_SPRING_DATASOURCE_DB2_USERNAME=${APPLICATION_SPRING_DATASOURCE_DB2_USERNAME}" >> .env
            echo "APPLICATION_SPRING_DATASOURCE_DB2_PASSWORD=${APPLICATION_SPRING_DATASOURCE_DB2_PASSWORD}" >> .env
            echo "SSL_KEY_STORE_PASSWORD=${SSL_KEY_STORE_PASSWORD}" >> .env
            
            echo "Pulling latest Docker image"
              sudo docker pull ${DOCKERHUB_USERNAME}/live_server:latest

              echo "Stopping and removing existing container"
              sudo docker stop prod || true
              sudo docker rm prod || true

              echo "Removing existing network"
              sudo docker network rm live_server_default || true

              echo "Pruning unused Docker objects"
              sudo docker system prune -f

              echo "Starting new container with Docker Compose"
              if sudo docker-compose -f docker-compose.yml -p live_server up -d; then
                echo "Docker Compose 실행 성공"
                sleep 20  # 애플리케이션이 완전히 시작될 때까지 대기
            
                if sudo docker logs prod | grep -q "Started BodamServerApplication"; then
                echo "애플리케이션이 성공적으로 시작되었습니다."
                else
                echo "애플리케이션 시작 실패. 로그를 확인하세요:"
                sudo docker logs prod
                exit 1
                fi
              else
                echo "Docker Compose 실행 실패"
                sudo docker-compose -f docker-compose.yml logs
                exit 1
              fi
