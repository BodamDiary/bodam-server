name: CICD
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: |
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            APPLICATION_SPRING_DATASOURCE_DB1_PROD_JDBC_URL=${{ secrets.APPLICATION_SPRING_DATASOURCE_DB1_PROD_JDBC_URL }}
            APPLICATION_SPRING_DATASOURCE_DB2_PROD_JDBC_URL=${{ secrets.APPLICATION_SPRING_DATASOURCE_DB2_PROD_JDBC_URL }}
            APPLICATION_KAKAO_CLIENT_ID=${{ secrets.APPLICATION_KAKAO_CLIENT_ID }}
            APPLICATION_KAKAO_PROD_REDIRECT_URI=${{ secrets.APPLICATION_KAKAO_PROD_REDIRECT_URI }}
            APPLICATION_SPRING_DATASOURCE_DB1_USERNAME=${{ secrets.APPLICATION_SPRING_DATASOURCE_DB1_USERNAME }}
            APPLICATION_SPRING_DATASOURCE_DB1_PASSWORD=${{ secrets.APPLICATION_SPRING_DATASOURCE_DB1_PASSWORD }}
            APPLICATION_SPRING_DATASOURCE_DB2_USERNAME=${{ secrets.APPLICATION_SPRING_DATASOURCE_DB2_USERNAME }}
            APPLICATION_SPRING_DATASOURCE_DB2_PASSWORD=${{ secrets.APPLICATION_SPRING_DATASOURCE_DB2_PASSWORD }}
          script: |
            # 환경변수 파일 생성
            {
              echo "DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME}"
              echo "spring.datasource.db1.jdbc-url=${APPLICATION_SPRING_DATASOURCE_DB1_PROD_JDBC_URL}"
              echo "spring.datasource.db2.jdbc-url=${APPLICATION_SPRING_DATASOURCE_DB2_PROD_JDBC_URL}"
              echo "kakao.client.id=${APPLICATION_KAKAO_CLIENT_ID}"
              echo "kakao.redirect.uri=${APPLICATION_KAKAO_PROD_REDIRECT_URI}"
              echo "spring.datasource.db1.username=${APPLICATION_SPRING_DATASOURCE_DB1_USERNAME}"
              echo "spring.datasource.db1.password=${APPLICATION_SPRING_DATASOURCE_DB1_PASSWORD}"
              echo "spring.datasource.db2.username=${APPLICATION_SPRING_DATASOURCE_DB2_USERNAME}"
              echo "spring.datasource.db2.password=${APPLICATION_SPRING_DATASOURCE_DB2_PASSWORD}"
            } > .env
            
            # Docker 이미지 pull
            sudo docker pull ${DOCKERHUB_USERNAME}/live_server:latest
            
            # 기존 컨테이너 정리
            if [ "$(sudo docker ps -q -f name=prod)" ]; then
              sudo docker stop prod
              sudo docker rm prod
            fi
            
            # 새 컨테이너 시작
            sudo docker-compose -f docker-compose-prod.yml up -d